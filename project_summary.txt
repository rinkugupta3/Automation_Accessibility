This project focuses on developing a comprehensive automation testing suite for web applications,
leveraging Selenium and Playwright for browser automation and functional testing.
It incorporates accessibility testing using Axe-core to ensure compliance with WCAG 2.1 standards,
generating detailed HTML and JSON reports on any violations found. Performance audits are conducted with Lighthouse,
producing reports that highlight are as for optimization. The testing suite is integrated with CI/CD pipelines in both
Azure and Jenkins, enabling seamless execution of headless and non-headless tests while managing dependencies
through Python's requirements.txt. Reports on accessibility, performance, and functional tests are generated and
archived as artifacts, providing valuable insights into the quality and reliability of the web applications under test.

##################################################################################################################
Project Summary: Automation Testing Suite
This project focuses on developing a comprehensive automation testing suite for web applications, utilizing various testing tools and frameworks, including Selenium, Playwright, and accessibility testing tools like Axe and Lighthouse. Hereâ€™s a brief overview of the components and workflow:

1. Test Frameworks:
Selenium: Used for browser automation and functional testing of web applications across multiple test scenarios.
Playwright: Employed for end-to-end testing, allowing the execution of tests in both headless and non-headless modes.

2. Testing Scenarios:
Accessibility Testing: Automated tests using Axe-core to ensure web applications meet accessibility standards (WCAG 2.1). Results are generated in HTML and JSON formats, providing detailed reports on accessibility violations.
Performance Testing: Utilizes Lighthouse to audit web applications for performance metrics, generating reports to identify areas for improvement.

3. CI/CD Integration:
Azure Pipelines: Configured to run headless tests across multiple stages, including accessibility and performance tests. The pipeline ensures that all reports are generated and published as artifacts for easy access.
Jenkins: A separate CI/CD setup that also runs tests in both headless and non-headless modes, archiving results and screenshots for comprehensive tracking of test outcomes.

4. Reports:
Accessibility Report: Generated by the accessibility tests, providing insights into compliance with accessibility guidelines.
Lighthouse Report: Offers performance analysis of the web applications tested.
Functional Test Reports: Include results from various test scenarios focused on different components of the web application.

5. Environment Setup:
Python is used as the programming language, with dependencies managed through requirements.txt. Both Jenkins and Azure pipelines are configured to set up the testing environment and run tests seamlessly.

Conclusion
This project demonstrates a robust automation testing framework capable of performing comprehensive testing, including functional, accessibility, and performance evaluations of web applications. The integration with CI/CD tools enhances the reliability and efficiency of the testing process, ensuring high-quality software delivery.